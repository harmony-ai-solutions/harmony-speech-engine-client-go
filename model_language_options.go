/*
Harmony Speech Engine API

API for the Harmony Speech Engine.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harmonyspeech

import (
	"encoding/json"
)

// checks if the LanguageOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageOptions{}

// LanguageOptions struct for LanguageOptions
type LanguageOptions struct {
	Language             *string        `json:"language,omitempty"`
	Voices               []VoiceOptions `json:"voices,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LanguageOptions LanguageOptions

// NewLanguageOptions instantiates a new LanguageOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageOptions() *LanguageOptions {
	this := LanguageOptions{}
	var language string = "default"
	this.Language = &language
	return &this
}

// NewLanguageOptionsWithDefaults instantiates a new LanguageOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageOptionsWithDefaults() *LanguageOptions {
	this := LanguageOptions{}
	var language string = "default"
	this.Language = &language
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *LanguageOptions) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguageOptions) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *LanguageOptions) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *LanguageOptions) SetLanguage(v string) {
	o.Language = &v
}

// GetVoices returns the Voices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageOptions) GetVoices() []VoiceOptions {
	if o == nil {
		var ret []VoiceOptions
		return ret
	}
	return o.Voices
}

// GetVoicesOk returns a tuple with the Voices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageOptions) GetVoicesOk() ([]VoiceOptions, bool) {
	if o == nil || IsNil(o.Voices) {
		return nil, false
	}
	return o.Voices, true
}

// HasVoices returns a boolean if a field has been set.
func (o *LanguageOptions) HasVoices() bool {
	if o != nil && !IsNil(o.Voices) {
		return true
	}

	return false
}

// SetVoices gets a reference to the given []VoiceOptions and assigns it to the Voices field.
func (o *LanguageOptions) SetVoices(v []VoiceOptions) {
	o.Voices = v
}

func (o LanguageOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if o.Voices != nil {
		toSerialize["voices"] = o.Voices
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LanguageOptions) UnmarshalJSON(data []byte) (err error) {
	varLanguageOptions := _LanguageOptions{}

	err = json.Unmarshal(data, &varLanguageOptions)

	if err != nil {
		return err
	}

	*o = LanguageOptions(varLanguageOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "language")
		delete(additionalProperties, "voices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLanguageOptions struct {
	value *LanguageOptions
	isSet bool
}

func (v NullableLanguageOptions) Get() *LanguageOptions {
	return v.value
}

func (v *NullableLanguageOptions) Set(val *LanguageOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageOptions(val *LanguageOptions) *NullableLanguageOptions {
	return &NullableLanguageOptions{value: val, isSet: true}
}

func (v NullableLanguageOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
