/*
Harmony Speech Engine API

API for the Harmony Speech Engine.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harmonyspeech

import (
	"encoding/json"
	"fmt"
)

// checks if the ModelCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelCard{}

// ModelCard struct for ModelCard
type ModelCard struct {
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	Created *int32 `json:"created,omitempty"`
	OwnedBy *string `json:"owned_by,omitempty"`
	Root NullableString `json:"root,omitempty"`
	Parent NullableString `json:"parent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelCard ModelCard

// NewModelCard instantiates a new ModelCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelCard(id string) *ModelCard {
	this := ModelCard{}
	this.Id = id
	var object string = "model"
	this.Object = &object
	var ownedBy string = "harmony-ai-solutions"
	this.OwnedBy = &ownedBy
	return &this
}

// NewModelCardWithDefaults instantiates a new ModelCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelCardWithDefaults() *ModelCard {
	this := ModelCard{}
	var object string = "model"
	this.Object = &object
	var ownedBy string = "harmony-ai-solutions"
	this.OwnedBy = &ownedBy
	return &this
}

// GetId returns the Id field value
func (o *ModelCard) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelCard) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelCard) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ModelCard) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCard) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ModelCard) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ModelCard) SetObject(v string) {
	o.Object = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelCard) GetCreated() int32 {
	if o == nil || IsNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCard) GetCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelCard) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *ModelCard) SetCreated(v int32) {
	o.Created = &v
}

// GetOwnedBy returns the OwnedBy field value if set, zero value otherwise.
func (o *ModelCard) GetOwnedBy() string {
	if o == nil || IsNil(o.OwnedBy) {
		var ret string
		return ret
	}
	return *o.OwnedBy
}

// GetOwnedByOk returns a tuple with the OwnedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCard) GetOwnedByOk() (*string, bool) {
	if o == nil || IsNil(o.OwnedBy) {
		return nil, false
	}
	return o.OwnedBy, true
}

// HasOwnedBy returns a boolean if a field has been set.
func (o *ModelCard) HasOwnedBy() bool {
	if o != nil && !IsNil(o.OwnedBy) {
		return true
	}

	return false
}

// SetOwnedBy gets a reference to the given string and assigns it to the OwnedBy field.
func (o *ModelCard) SetOwnedBy(v string) {
	o.OwnedBy = &v
}

// GetRoot returns the Root field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelCard) GetRoot() string {
	if o == nil || IsNil(o.Root.Get()) {
		var ret string
		return ret
	}
	return *o.Root.Get()
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelCard) GetRootOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Root.Get(), o.Root.IsSet()
}

// HasRoot returns a boolean if a field has been set.
func (o *ModelCard) HasRoot() bool {
	if o != nil && o.Root.IsSet() {
		return true
	}

	return false
}

// SetRoot gets a reference to the given NullableString and assigns it to the Root field.
func (o *ModelCard) SetRoot(v string) {
	o.Root.Set(&v)
}
// SetRootNil sets the value for Root to be an explicit nil
func (o *ModelCard) SetRootNil() {
	o.Root.Set(nil)
}

// UnsetRoot ensures that no value is present for Root, not even an explicit nil
func (o *ModelCard) UnsetRoot() {
	o.Root.Unset()
}

// GetParent returns the Parent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelCard) GetParent() string {
	if o == nil || IsNil(o.Parent.Get()) {
		var ret string
		return ret
	}
	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelCard) GetParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// HasParent returns a boolean if a field has been set.
func (o *ModelCard) HasParent() bool {
	if o != nil && o.Parent.IsSet() {
		return true
	}

	return false
}

// SetParent gets a reference to the given NullableString and assigns it to the Parent field.
func (o *ModelCard) SetParent(v string) {
	o.Parent.Set(&v)
}
// SetParentNil sets the value for Parent to be an explicit nil
func (o *ModelCard) SetParentNil() {
	o.Parent.Set(nil)
}

// UnsetParent ensures that no value is present for Parent, not even an explicit nil
func (o *ModelCard) UnsetParent() {
	o.Parent.Unset()
}

func (o ModelCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.OwnedBy) {
		toSerialize["owned_by"] = o.OwnedBy
	}
	if o.Root.IsSet() {
		toSerialize["root"] = o.Root.Get()
	}
	if o.Parent.IsSet() {
		toSerialize["parent"] = o.Parent.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelCard) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelCard := _ModelCard{}

	err = json.Unmarshal(data, &varModelCard)

	if err != nil {
		return err
	}

	*o = ModelCard(varModelCard)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "object")
		delete(additionalProperties, "created")
		delete(additionalProperties, "owned_by")
		delete(additionalProperties, "root")
		delete(additionalProperties, "parent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelCard struct {
	value *ModelCard
	isSet bool
}

func (v NullableModelCard) Get() *ModelCard {
	return v.value
}

func (v *NullableModelCard) Set(val *ModelCard) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCard) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCard(val *ModelCard) *NullableModelCard {
	return &NullableModelCard{value: val, isSet: true}
}

func (v NullableModelCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


