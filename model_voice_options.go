/*
Harmony Speech Engine API

API for the Harmony Speech Engine.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harmonyspeech

import (
	"encoding/json"
)

// checks if the VoiceOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoiceOptions{}

// VoiceOptions struct for VoiceOptions
type VoiceOptions struct {
	Voice                *string  `json:"voice,omitempty"`
	Styles               []string `json:"styles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VoiceOptions VoiceOptions

// NewVoiceOptions instantiates a new VoiceOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoiceOptions() *VoiceOptions {
	this := VoiceOptions{}
	var voice string = "default"
	this.Voice = &voice
	return &this
}

// NewVoiceOptionsWithDefaults instantiates a new VoiceOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoiceOptionsWithDefaults() *VoiceOptions {
	this := VoiceOptions{}
	var voice string = "default"
	this.Voice = &voice
	return &this
}

// GetVoice returns the Voice field value if set, zero value otherwise.
func (o *VoiceOptions) GetVoice() string {
	if o == nil || IsNil(o.Voice) {
		var ret string
		return ret
	}
	return *o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceOptions) GetVoiceOk() (*string, bool) {
	if o == nil || IsNil(o.Voice) {
		return nil, false
	}
	return o.Voice, true
}

// HasVoice returns a boolean if a field has been set.
func (o *VoiceOptions) HasVoice() bool {
	if o != nil && !IsNil(o.Voice) {
		return true
	}

	return false
}

// SetVoice gets a reference to the given string and assigns it to the Voice field.
func (o *VoiceOptions) SetVoice(v string) {
	o.Voice = &v
}

// GetStyles returns the Styles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VoiceOptions) GetStyles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VoiceOptions) GetStylesOk() ([]string, bool) {
	if o == nil || IsNil(o.Styles) {
		return nil, false
	}
	return o.Styles, true
}

// HasStyles returns a boolean if a field has been set.
func (o *VoiceOptions) HasStyles() bool {
	if o != nil && !IsNil(o.Styles) {
		return true
	}

	return false
}

// SetStyles gets a reference to the given []string and assigns it to the Styles field.
func (o *VoiceOptions) SetStyles(v []string) {
	o.Styles = v
}

func (o VoiceOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoiceOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Voice) {
		toSerialize["voice"] = o.Voice
	}
	if o.Styles != nil {
		toSerialize["styles"] = o.Styles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VoiceOptions) UnmarshalJSON(data []byte) (err error) {
	varVoiceOptions := _VoiceOptions{}

	err = json.Unmarshal(data, &varVoiceOptions)

	if err != nil {
		return err
	}

	*o = VoiceOptions(varVoiceOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "voice")
		delete(additionalProperties, "styles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVoiceOptions struct {
	value *VoiceOptions
	isSet bool
}

func (v NullableVoiceOptions) Get() *VoiceOptions {
	return v.value
}

func (v *NullableVoiceOptions) Set(val *VoiceOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableVoiceOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableVoiceOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoiceOptions(val *VoiceOptions) *NullableVoiceOptions {
	return &NullableVoiceOptions{value: val, isSet: true}
}

func (v NullableVoiceOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoiceOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
